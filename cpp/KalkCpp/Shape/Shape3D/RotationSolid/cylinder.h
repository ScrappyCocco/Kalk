#ifndef CYLINDER_H
#define CYLINDER_H

#include "../../Shape2D/Polygon/Quadrilateral/rectangle.h"
#include "../shape3d.h"
#include "rotationsolid.h"

class Cylinder : public RotationSolid
{
private:
    /**
        Function that build a Cylinder from the base shape (Rectangle)

        @param  baseShape
        @return The points of the new Cylinder
    */
    std::vector<Point3D> buildCylinder(Rectangle*) const;
public:
    /**
        Constructor for Cylinder with 3 params: points, base shape, Rectangle's name and color

        @param vp3d The vector of points for the Cylinder
        @param baseShape
        @param name The name for the Rectangle (By default is "Cylinder")
        @param color The color for the Rectangle (By default create a simple ColorRGB (0,0,0))
    */
    Cylinder(const std::vector<Point3D>&, Rectangle*, ColorRGB* = new ColorRGB());

    /**
        Constructor for Rectangle with 3 params: sideLength, Rectangle's name and color

        @param sideLength The side Length for the Rectangle
        @param name The name for the Rectangle (By default is "Rectangle")
        @param color The color for the Rectangle (By default create a simple ColorRGB (0,0,0))
    */
    Cylinder(Rectangle*, ColorRGB* = new ColorRGB());

    /**
     * Clone() virtual method to create a new Cylinder from an existing one
     *
     * @return a new Cylinder that is a copy of the current one
     */
    Cylinder* clone() const;

    /**
        Difference operator for Cylinder

        @param c the (second) Shape to use
        @return a new Rectangle that is the difference between the Cylinder and the Shape
    */
    Cylinder* operator-(const Shape3D&) const;

    /**
        Sum operator for Cylinder

        @param c the (second) Shape to use
        @return a new Rectangle that is the sum between the Cylinder and the Shape
    */
    Cylinder* operator+(const Shape3D&) const;

    /**
        Multiply operator for Cylinder

        @param c the (second) Shape to use
        @return a new Rectangle that is the multiplication between the Cylinder and the Shape
    */
    Cylinder* operator*(const Shape3D&) const;

    /**
        Division operator for Cylinder

        @param c the (second) Shape to use
        @return a new Rectangle that is the division between the Cylinder and the Shape
    */
    Cylinder* operator/(const Shape3D&) const;

    /**
        Function that return volume of the Cylinder

        @return The volume of the Cylinder
    */
    double volume() const;


    /**
        Function that return base of the Cylinder(ray of tha circle generated by the rotation of the Rectangle)

        @return The base of the Cylinder(ray of tha circle generated by the rotation of the Rectangle)
    */
    double ray() const;

    /**
        Function that return height of the Cylinder

        @return The Height of the Cylinder
    */
    double height() const;

    /**
        Function that return the total surface of the Cylinder

        @return The total surface of the Cylinder
    */
    double totalSurface() const;

    /**
        Function that return the lateral surface of the Cylinder

        @return The lateral surface of the Cylinder
    */
    double lateralSurface() const;

    /**
        Function that return the base surface of the Cylinder

        @return The base surface of the Cylinder
    */
    double baseSurface() const;

};

#endif // CYLINDER_H
